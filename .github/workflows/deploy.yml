name: Deploy

on:
  workflow_call:
    inputs:
      ECS_CLUSTER:
        required: true
        type: string
      DJANGO_DEBUG:
        required: true
        type: string
      DJANGO_CONFIGURATION:
        required: true
        type: string
      DJANGO_SECRET_KEY:
        required: true
        type: string
      AWSLOGS_STREAM_PREFIX:
        required: true
        type: string

    secrets:
      SENTRY_DSN:
        required: true
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      SLACK_URL:
        required: true
      DATABASE_URL:
        required: true


env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: artweb
  ECR_REGISTRY: "708610861541.dkr.ecr.us-east-1.amazonaws.com"

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, Tag, and Push Image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy-api:
    name: Api
    needs: build
    runs-on: ubuntu-latest
    env:
      ECS_CLUSTER: ${{ inputs.ECS_CLUSTER }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Generate Image ID
        id: generate-image-id
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Generate API task definition
        run: ./ecs/api.sh
        env:
          DJANGO_DEBUG: ${{ inputs.DJANGO_DEBUG }}
          DJANGO_CONFIGURATION: ${{ inputs.DJANGO_CONFIGURATION }}
          DJANGO_SECRET_KEY: ${{ inputs.DJANGO_SECRET_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.DJANGO_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          AWSLOGS_STREAM_PREFIX: ${{ inputs.AWSLOGS_STREAM_PREFIX }}
          SENTRY_DSN: ${{ secrets.SENsecretsTRY_DSN }}
          ECR_IMAGE: ${{ steps.generate-image-id.outputs.image }}

      - name: Deploy Api
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ecs-deploy-task.json
          service: dailyidea-backend-api
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Slack Notification
        if: always()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: dailyidea-dev
          SLACK_WEBHOOK: ${{ secrets.SLACK_URL }}
          SLACK_USERNAME: github
          SLACK_COLOR: ${{ job.status }}
          MSG_MINIMAL: actions url,commit
          SLACK_TITLE: Backend Api
          SLACK_FOOTER: ${{ job.status }}

  deploy-worker:
    name: Worker
    needs: deploy-api
    runs-on: ubuntu-latest
    env:
      ECS_CLUSTER: ${{ inputs.ECS_CLUSTER }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Generate Image ID
        id: generate-image-id
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Generate Worker task definition
        run: ./ecs/worker.sh
        env:
          DJANGO_DEBUG: ${{ inputs.DJANGO_DEBUG }}
          DJANGO_CONFIGURATION: ${{ inputs.DJANGO_CONFIGURATION }}
          DJANGO_SECRET_KEY: ${{ inputs.DJANGO_SECRET_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.DJANGO_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          AWSLOGS_STREAM_PREFIX: ${{ inputs.AWSLOGS_STREAM_PREFIX }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          ECR_IMAGE: ${{ steps.generate-image-id.outputs.image }}

      - name: Deploy Worker
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ecs-deploy-task.json
          service: dailyidea-backend-worker
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Slack Notification
        if: always()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: dailyidea-dev
          SLACK_WEBHOOK: ${{ secrets.SLACK_URL }}
          SLACK_USERNAME: github
          SLACK_COLOR: ${{ job.status }}
          MSG_MINIMAL: actions url,commit
          SLACK_TITLE: Backend Worker
          SLACK_FOOTER: ${{ job.status }}

  collect-static:
    name: Collect Static
    runs-on: ubuntu-latest
    needs: build
    # if: github.ref_name == 'main'
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'

      - name: Install PIP Requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Collect Static
        env:
            DJANGO_SECRET_KEY: local
            DJANGO_CONFIGURATION: Production
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

        run: python manage.py collectstatic --noinput

      - name: Slack Notification
        if: always()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: dailyidea-dev
          SLACK_WEBHOOK: ${{ secrets.SLACK_URL }}
          SLACK_USERNAME: github
          SLACK_COLOR: ${{ job.status }}
          MSG_MINIMAL: actions url,commit
          SLACK_TITLE: Collect Static to S3
          SLACK_FOOTER: ${{ job.status }}
